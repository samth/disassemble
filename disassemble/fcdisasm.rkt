
;; -*- mode: scheme; coding: utf-8 -*- !#
;; fcdisasm - The Full-Color Disassembler
;; Copyright © 2008, 2009, 2010, 2011, 2016, 2017, 2018 Göran Weinholt <goran@weinholt.se>
;; SPDX-License-Identifier: MIT
#lang racket

;; This program is an example of how to use (industria disassembler)
;; and a novelty: first disassembler to go *full color* for the hex
;; dump!

(require rnrs
         (only-in machine-code/disassembler
                  invalid-opcode?
                  available-disassemblers get-disassembler
                  disassembler-max-instruction-size
                  disassembler-instruction-getter))
(provide disassemble)

;; Print an instruction with hexadecimal numbers.
(define (print-instr/sexpr i)
  (cond ((pair? i)
         (display "(")
         (let lp ((i i))
           (unless (null? i)
             (print-instr/sexpr (car i))
             (unless (null? (cdr i))
               (display #\space)
               (lp (cdr i)))))
         (display ")"))
        ((and (number? i) (exact? i) (integer? i))
         (display "#x")
         (display (number->string i 16)))
        (else
         (display i))))

#|

The generated code for a function call in Chez Scheme is roughly

(lea rcx (mem+ rip <at resume-instruction>))
(mov <onto Scheme stack> rcx)
(jmp <somewhere>)
<data> ...
<resume-instruction>

where the <data> describes the frame size, live variables, etc., and
generally doesn't decode nicely. Make the dissasembler here reject an
instruction that spans an address that was produced by a RIP-relative
calculation, so it will sync back up with the return point (even if
some amount of the <data> is decoded as nonsense).

The `ndisasm` executable has a similar built-in inference option, but
since is only infers sync points based on jump targets, it doesn't
manage to handle code generated by Chez Scheme.

|#

(define (disassemble p disassembler color end-position pc symbols relocations is-jump?)
  (define (next-symbol symbols pc)
    (cond ((null? symbols) symbols)
          ((null? (cdr symbols)) symbols)
          ((or (> pc (cadar symbols))
               (= pc (caadr symbols)))
           (next-symbol (cdr symbols) pc))
          (else symbols)))
  (define get-instruction (disassembler-instruction-getter disassembler))
  (define hex-width (+ 1 (* 2 (disassembler-max-instruction-size disassembler))))
  (let ([jump-targets (get-jump-targets p get-instruction is-jump? end-position pc)]
        [end-pc (and end-position (+ pc end-position))])
    (let lp ((pos (port-position p))
             (pc pc)
             (symbols (next-symbol symbols pc))
             (data-mode? #f))
      (let* ((tagged-bytes '())
             (i (cond
                 [(and data-mode?
                       (not (jump-target? pc jump-targets)))
                  (let loop ([len 0])
                    (cond
                     [(= len 8) '(data)]
                     [(or (jump-target? (+ pc len) jump-targets)
                          (and (positive? len)
                               (extract-relocation relocations (+ pc len) 1)))
                      `(data)]
                     [else
                      (let ([b (read-byte p)])
                        (cond
                         [(eof-object? b)
                          (if (zero? len)
                              eof
                              '(data))]
                         [else
                          (set! tagged-bytes (cons (list 'data b) tagged-bytes))
                          (loop (add1 len))]))]))]
                 [else
                  (guard (con
                          ((invalid-opcode? con)
                           (list 'bad:
                                 (condition-message con))))
                         (get-instruction p
                                          (lambda x
                                            (set! tagged-bytes (cons x tagged-bytes)))))]))
             (new-pos (port-position p))
             (new-pc (+ pc (- new-pos pos))))
        ;; Print info from the symbol table
        (unless (null? symbols)
          (when (= pc (caar symbols))
            (let ((sym (car symbols)))
              (newline)
              (when color (display "\x1b;[4m"))
              (display (number->string (car sym) 16))
              (display #\-)
              (display (number->string (cadr sym) 16))
              (when color (display "\x1b;[0m"))
              (display #\space)
              (display (caddr sym))
              (newline))))
        ;; Print instructions
        (unless (or (eof-object? i)
                    (and end-position (> new-pos end-position)))
          (cond
           [(spanned-sync-point? pc jump-targets new-pc)
            ;; Emit data byte and retry at next byte
            (file-position p pos)
            (let ([b (read-byte p)])
              (display-instruction pc (list (cons 'data (list b))) `(data ,b) '() color 1 relocations '())
              (lp (add1 pos) (add1 pc) symbols #t))]
           [else
            (let ([new-sync-points (extract-sync-points new-pc i end-pc)])
              (display-instruction pc tagged-bytes i new-sync-points color (- new-pos pos) relocations jump-targets)
              (lp new-pos new-pc (next-symbol symbols new-pc) (or (is-jump? i) (eq? (car i) 'data))))]))))))

(define (display-instruction pc tagged-bytes i derived color len relocations jump-targets)
  (define (display-addr addr)
    (let ((x (number->string addr 16)))
      (if (< (string-length x) 8)
          (display (make-string (- 8 (string-length x)) #\space)))
      (display x)))
  (display-addr pc)
  (display ": ")
  (for-each (lambda (x)
              (let ((tag (car x))
                    (bytes (cdr x)))
                (cond ((eq? tag '/is4)
                       (when color
                         (display "\x1b;[1;34m"))
                       (display (number->string (bitwise-bit-field (car bytes) 4 8) 16))
                       (when color
                         (display "\x1b;[1;37m"))
                       (display (number->string (bitwise-bit-field (car bytes) 0 4) 16)))
                      (else
                       (when color
                         (case tag
                           ((modr/m sib tfr/exg/sex) (display "\x1b;[1;34m"))
                           ((opcode) (display "\x1b;[1;32m"))
                           ((prefix) (display "\x1b;[1;33m"))
                           ((immediate) (display "\x1b;[1;37m"))
                           ((disp offset) (display "\x1b;[1;35m"))
                           (else (display "\x1b;[0m"))))
                       (for-each (lambda (byte)
                                   (when (< byte #x10)
                                     (display #\0))
                                   (display (number->string byte 16)))
                                 bytes)))))
            (reverse tagged-bytes))
  (when color
    (display "\x1b;[0m"))
  (display (make-string (- 31 (* 2 len)) #\space))
  (print-instr/sexpr i)
  (let ([a (extract-relocation relocations pc len)])
    (cond
     [a (printf " ; ~.v" (cdr a))]
     [else
      (for-each (lambda (d)
                  (printf " ; => ~x" d))
                derived)]))
  (when (memv pc jump-targets)
    (display " ; <="))
  (newline))

;; Jump targets are sync points.
;; Find reachable code by recognizing jumps and skipping to the jump
;; target, accumulating those jump targets. By building up a list of
;; those targets, we can later disassemble by linearly scanning,
;; going into data mode when we see a jump and returning to code mode
;; when we reach a sync point.
(define (get-jump-targets p get-instruction is-jump? end-position start-pc)
  (define starting-pos (port-position p))
  (define end-pc (and end-position (+ start-pc end-position)))
  (let lp ((pos (port-position p))
           (pc start-pc)
           (sync-points '())
           (to-explore '())
           (explored (hasheqv)))
    (let ([explore-next (lambda (to-explore sync-points explored)
                          (cond
                           [(null? to-explore)
                            (file-position p starting-pos)
                            sync-points]
                           [else
                            (let* ([new-pc (car to-explore)]
                                   [pos (- new-pc start-pc)])
                              (file-position p pos)
                              (lp pos new-pc sync-points (cdr to-explore) explored))]))])
      (cond
       [(hash-ref explored pc #f)
        (explore-next to-explore sync-points explored)]
       [else
        (let* ((i (guard (con
                          ((invalid-opcode? con)
                           (list 'bad:
                                 (condition-message con))))
                         (get-instruction p void)))
               (new-pos (port-position p))
               (new-pc (+ pc (- new-pos pos)))
               (explored (hash-set explored pc #t)))
          (cond
           [(or (eof-object? i)
                (and end-position (> new-pos end-position)))
            (explore-next to-explore sync-points explored)]
           [(spanned-sync-point? pc sync-points new-pc)
            (file-position p pos)
            (read-byte p)
            (lp (add1 pos) (add1 pc) sync-points)]
           [else
            (let* ([new-sync-points (extract-sync-points new-pc i end-pc)]
                   [sync-points (append new-sync-points sync-points)]
                   [to-explore (append new-sync-points to-explore)])
              (if (is-jump? i)
                  (explore-next to-explore sync-points explored)
                  (lp new-pos new-pc sync-points to-explore explored)))]))]))))

(define (extract-sync-points pc i end-pc)
  (let loop ([i i])
    (cond
     [(null? i) '()]
     [else
      (let ([e (car i)])
        (cond
         [(and (pair? e)
               (or (eq? (car e) '+)
                   (eq? (car e) 'mem+))
               (pair? (cdr e))
               (eq? (cadr e) 'rip)
               (pair? (cddr e))
               (null? (cdddr e))
               (integer? (caddr e)))
          (let ([v (+ pc (caddr e))])
            (if (or (negative? v)
                    (and end-pc (>= v end-pc)))
                (loop (cdr i))
                (cons v (loop (cdr i)))))]
         [else
          (loop (cdr i))]))])))

(define (extract-relocation relocations pc len)
  (cond
   [(null? relocations) #f]
   [(<= pc (caar relocations) (+ pc (sub1 len)))
    (car relocations)]
   [else (extract-relocation (cdr relocations) pc len)]))

(define (spanned-sync-point? pc sync-points new-pc)
  (let loop ([sync-points sync-points])
    (if (null? sync-points)
        #f
        (let ([p (car sync-points)])
          (or (< pc p new-pc)
              (loop (cdr sync-points)))))))

(define (jump-target? pc sync-points)
  (memq pc sync-points))
#;
(define (elf-architecture-symbol image)
  ;; XXX: Move to (machine-code format elf)
  (let ((machine (elf-image-machine image))
        (endianness (elf-image-endianness image))
        (entry (elf-image-entry image)))
    (cond ((and (= machine EM-ARM) (= (bitwise-and entry #b1) #b1)) 'arm-t32)
          ((and (= machine EM-ARM) (= (bitwise-and entry #b11) #b00)) 'arm-a32)
          ((= machine EM-AARCH6) 'arm-a64)
          ((= machine EM-386) 'x86-32)
          ((= machine EM-X86-64) 'x86-64)
          ((= machine EM-68HC12) 'm68hc12)
          ((= machine EM-MIPS) (if (= endianness ELFDATA2LSB) 'mipsel 'mipsbe))
          (else
           (error 'elf-architecture-symbol
                  "No support for this architecture"
                  (cond ((assv machine elf-machine-names) => cdr)
                        (else machine)))))))

;; Returns a list of (start-addr end-addr symbol) in increasing order.
#;(define (parse-elf-symbols image)
  (cond ((elf-image-symbols image) =>
         (lambda (symbols)
           (vector-sort! (lambda (s1 s2)
                           (> (elf-symbol-value (cdr s1))
                              (elf-symbol-value (cdr s2))))
                         symbols)
           (let lp ((ret '())
                    (i 0))
             (if (= i (vector-length symbols))
                 ret
                 (let* ((sym (vector-ref symbols i))
                        (name (car sym)) (s (cdr sym)))
                   (if (or (eqv? (elf-symbol-name s) 0)
                           (eqv? (elf-symbol-shndx s) SHN-UNDEF))
                       (lp ret (+ i 1))
                       (lp (cons (list (elf-symbol-value s)
                                       (+ (elf-symbol-value s)
                                          (elf-symbol-size s))
                                       name)
                                 ret)
                           (+ i 1))))))))
        (else '())))

#;(define (disassemble-file filename arch color)
  (cond ((is-elf-image? filename)
         (display "ELF image detected. Looking for .text section...\n")
         (let* ((image (open-elf-image filename))
                (text (elf-image-section-by-name image ".text")))
           (cond ((and text (= (elf-section-type text) SHT-PROGBITS))
                  (let ((arch (elf-architecture-symbol image))
                        (symbols (parse-elf-symbols image)))
                    (set-port-position! (elf-image-port image)
                                        (elf-section-offset text))
                    (disassemble (elf-image-port image)
                                 (get-disassembler arch)
                                 color
                                 (+ (elf-section-offset text)
                                    (elf-section-size text))
                                 (elf-section-addr text)
                                 symbols)))
                 (else
                  (display "This ELF image has no .text section with executable code.\n")
                  (display "No disassembly for you.\n")))))
        (else
         ;; Assume a DOS .com file.
         (disassemble (open-file-input-port filename)
                      (get-disassembler (string->symbol arch))
                      color #f #x100 '()))))
#;
(define (parse-args args)
  (define (help . msg)
    (let ((x (current-error-port)))
      (when msg (display (car msg) x) (newline x) (newline x))
      (display "fcdisasm - Full-color disassembler

Usage:
  fcdisasm [-b|--bits <bits>] [-a|--arch <arch>] [--nocolor] [--] <filename>

The <bits> argument can be either 16 (default), 32 or 64. This is
shorthand for --arch x86-<bits>.

The <arch> argument, used for raw binary files, is one of these:
" x)
      (let lp ((arch* (available-disassemblers)))
        (unless (null? arch*)
          (display (car arch*))
          (unless (null? (cdr arch*))
            (display ", "))
          (lp (cdr arch*))))
      (display ".\n")
      (display "
The --nocolor flag suppresses the color output.

Author: Göran Weinholt <goran@weinholt.se>.
")
      (exit 1)))
  (let lp ((filename #f)
           (color #t)
           (arch "x86-16")
           (args args))
    (cond ((null? args)
           (unless filename
             (help "ERROR: No filename given."))
           (values filename arch color))
          ((or (string=? (car args) "--bits")
               (string=? (car args) "-b"))
           (if (null? (cdr args)) (help "ERROR: -b needs an argument (16, 32, 64)"))
           (cond ((assoc (cadr args) '(("64" . "x86-64") ("32" . "x86-32") ("16" . "x86-16"))) =>
                  (lambda (x)
                    (lp filename color (cdr x) (cddr args))))
                 (else
                  (help "ERROR: invalid argument for --bits flag"))))
          ((member (car args) '("-a" "--arch"))
           (if (null? (cdr args)) (help "ERROR: -a needs an argument"))
           (cond ((memq (string->symbol (cadr args)) (available-disassemblers)) =>
                  (lambda (_)
                    (lp filename color (cadr args) (cddr args))))
                 (else
                  (help "ERROR: invalid argument for --arch flag"))))
          ((string=? (car args) "--nocolor")
           (lp filename #f arch (cdr args)))
          ((string=? (car args) "--")
           (if (not (= (length args) 2)) (help "ERROR: following -- must be only a filename"))
           (if filename (help "ERROR: you can't have it both ways, use -- or don't"))
           (lp (cadr args) color arch (cddr args)))
          (else
           (if filename (help "ERROR: extra arguments on command line"))
           (lp (car args) color arch (cdr args))))))

;; (define (main args)
;;   (call-with-values (lambda () (parse-args args))
;;     disassemble-file))

;; (main (cdr (command-line)))
;; (flush-output-port (current-output-port))
